GAS LISTING /tmp/ccWfDmNj.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_Z15wrapperUserMainPv
   9              	_Z15wrapperUserMainPv:
  10              	.LFB40:
  11              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** 
   2:src/main.cpp  **** #include "../lib/hw.h"
   3:src/main.cpp  **** #include "../lib/console.h"
   4:src/main.cpp  **** #include "../h/MemoryAllocator.h"
   5:src/main.cpp  **** #include "../h/syscall_c.h"
   6:src/main.cpp  **** #include "../h/riscv.h"
   7:src/main.cpp  **** #include "../h/_thread.h"
   8:src/main.cpp  **** 
   9:src/main.cpp  **** extern "C" void trap();
  10:src/main.cpp  **** void userMain();
  11:src/main.cpp  **** 
  12:src/main.cpp  **** void wrapperUserMain(void *){
  12              		.loc 1 12 29
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23341100 		sd	ra,8(sp)
  17 0008 23308100 		sd	s0,0(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040101 		addi	s0,sp,16
  21              		.cfi_def_cfa 8, 0
  13:src/main.cpp  ****     userMain();
  22              		.loc 1 13 5
  23              		.loc 1 13 13 is_stmt 0
  24 0010 97000000 		call	_Z8userMainv@plt
  24      E7800000 
  25              	.LVL0:
  14:src/main.cpp  **** }
  26              		.loc 1 14 1
  27 0018 83308100 		ld	ra,8(sp)
  28              		.cfi_restore 1
  29 001c 03340100 		ld	s0,0(sp)
  30              		.cfi_restore 8
  31              		.cfi_def_cfa 2, 16
  32 0020 13010101 		addi	sp,sp,16
  33              		.cfi_def_cfa_offset 0
  34 0024 67800000 		jr	ra
  35              		.cfi_endproc
  36              	.LFE40:
  38              		.align	2
  39              		.globl	main
  41              	main:
  42              	.LFB41:
  15:src/main.cpp  **** 
  16:src/main.cpp  **** int main(){
  43              		.loc 1 16 11 is_stmt 1
GAS LISTING /tmp/ccWfDmNj.s 			page 2


  44              		.cfi_startproc
  45 0028 130101FE 		addi	sp,sp,-32
  46              		.cfi_def_cfa_offset 32
  47 002c 233C1100 		sd	ra,24(sp)
  48 0030 23388100 		sd	s0,16(sp)
  49 0034 23349100 		sd	s1,8(sp)
  50 0038 23302101 		sd	s2,0(sp)
  51              		.cfi_offset 1, -8
  52              		.cfi_offset 8, -16
  53              		.cfi_offset 9, -24
  54              		.cfi_offset 18, -32
  55 003c 13040102 		addi	s0,sp,32
  56              		.cfi_def_cfa 8, 0
  17:src/main.cpp  **** 
  18:src/main.cpp  ****     _thread* threads[2];
  57              		.loc 1 18 5
  19:src/main.cpp  **** 
  20:src/main.cpp  ****     threads[0] = _thread::createThread(nullptr, nullptr);
  58              		.loc 1 20 5
  59              		.loc 1 20 39 is_stmt 0
  60 0040 93050000 		li	a1,0
  61 0044 13050000 		li	a0,0
  62 0048 97000000 		call	_ZN7_thread12createThreadEPFvPvES0_@plt
  62      E7800000 
  63              	.LVL1:
  64 0050 13090500 		mv	s2,a0
  21:src/main.cpp  ****     threads[1] = _thread::createThread(&wrapperUserMain, nullptr);
  65              		.loc 1 21 5 is_stmt 1
  66              		.loc 1 21 39 is_stmt 0
  67 0054 93050000 		li	a1,0
  68 0058 17050000 		lla	a0,_Z15wrapperUserMainPv
  68      13050500 
  69 0060 97000000 		call	_ZN7_thread12createThreadEPFvPvES0_@plt
  69      E7800000 
  70              	.LVL2:
  71 0068 93040500 		mv	s1,a0
  22:src/main.cpp  ****     threads[1]->start();
  72              		.loc 1 22 5 is_stmt 1
  73              		.loc 1 22 22 is_stmt 0
  74 006c 97000000 		call	_ZN7_thread5startEv@plt
  74      E7800000 
  75              	.LVL3:
  23:src/main.cpp  **** 
  24:src/main.cpp  ****     Riscv::w_stvec((uint64) &trap);
  76              		.loc 1 24 5 is_stmt 1
  77              		.loc 1 24 19 is_stmt 0
  78 0074 97070000 		la	a5,trap
  78      83B70700 
  79              	.LVL4:
  80              	.LBB8:
  81              	.LBB9:
  82              		.file 2 "src/../h/riscv.h"
   1:src/../h/riscv.h **** //
   2:src/../h/riscv.h **** // Created by os on 6/21/22.
   3:src/../h/riscv.h **** //
   4:src/../h/riscv.h **** 
   5:src/../h/riscv.h **** #ifndef OS_PROJEKAT_RISCV_H
GAS LISTING /tmp/ccWfDmNj.s 			page 3


   6:src/../h/riscv.h **** #define OS_PROJEKAT_RISCV_H
   7:src/../h/riscv.h **** 
   8:src/../h/riscv.h **** #include "../lib/hw.h"
   9:src/../h/riscv.h **** 
  10:src/../h/riscv.h **** class Riscv
  11:src/../h/riscv.h **** {
  12:src/../h/riscv.h **** public:
  13:src/../h/riscv.h **** 
  14:src/../h/riscv.h ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  15:src/../h/riscv.h ****     static void popSppSpie();
  16:src/../h/riscv.h **** 
  17:src/../h/riscv.h ****     // push x3..x31 registers onto stack
  18:src/../h/riscv.h ****     static void pushRegisters();
  19:src/../h/riscv.h **** 
  20:src/../h/riscv.h ****     // pop x3..x31 registers onto stack
  21:src/../h/riscv.h ****     static void popRegisters();
  22:src/../h/riscv.h **** 
  23:src/../h/riscv.h ****     // read register scause
  24:src/../h/riscv.h ****     static uint64 r_scause();
  25:src/../h/riscv.h **** 
  26:src/../h/riscv.h ****     // write register scause
  27:src/../h/riscv.h ****     static void w_scause(uint64 scause);
  28:src/../h/riscv.h **** 
  29:src/../h/riscv.h ****     // read register sepc
  30:src/../h/riscv.h ****     static uint64 r_sepc();
  31:src/../h/riscv.h **** 
  32:src/../h/riscv.h ****     // write register sepc
  33:src/../h/riscv.h ****     static void w_sepc(uint64 sepc);
  34:src/../h/riscv.h **** 
  35:src/../h/riscv.h ****     // read register stvec
  36:src/../h/riscv.h ****     static uint64 r_stvec();
  37:src/../h/riscv.h **** 
  38:src/../h/riscv.h ****     // write register stvec
  39:src/../h/riscv.h ****     static void w_stvec(uint64 stvec);
  40:src/../h/riscv.h **** 
  41:src/../h/riscv.h ****     // read register stval
  42:src/../h/riscv.h ****     static uint64 r_stval();
  43:src/../h/riscv.h **** 
  44:src/../h/riscv.h ****     // write register stval
  45:src/../h/riscv.h ****     static void w_stval(uint64 stval);
  46:src/../h/riscv.h **** 
  47:src/../h/riscv.h ****     enum BitMaskSip
  48:src/../h/riscv.h ****     {
  49:src/../h/riscv.h ****         SIP_SSIP = (1 << 1),
  50:src/../h/riscv.h ****         SIP_STIP = (1 << 5),
  51:src/../h/riscv.h ****         SIP_SEIP = (1 << 9),
  52:src/../h/riscv.h ****     };
  53:src/../h/riscv.h **** 
  54:src/../h/riscv.h ****     // mask set register sip
  55:src/../h/riscv.h ****     static void ms_sip(uint64 mask);
  56:src/../h/riscv.h **** 
  57:src/../h/riscv.h ****     // mask clear register sip
  58:src/../h/riscv.h ****     static void mc_sip(uint64 mask);
  59:src/../h/riscv.h **** 
  60:src/../h/riscv.h ****     // read register sip
  61:src/../h/riscv.h ****     static uint64 r_sip();
  62:src/../h/riscv.h **** 
GAS LISTING /tmp/ccWfDmNj.s 			page 4


  63:src/../h/riscv.h ****     // write register sip
  64:src/../h/riscv.h ****     static void w_sip(uint64 sip);
  65:src/../h/riscv.h **** 
  66:src/../h/riscv.h ****     enum BitMaskSstatus
  67:src/../h/riscv.h ****     {
  68:src/../h/riscv.h ****         SSTATUS_SIE = (1 << 1),
  69:src/../h/riscv.h ****         SSTATUS_SPIE = (1 << 5),
  70:src/../h/riscv.h ****         SSTATUS_SPP = (1 << 8),
  71:src/../h/riscv.h ****     };
  72:src/../h/riscv.h **** 
  73:src/../h/riscv.h ****     // mask set register sstatus
  74:src/../h/riscv.h ****     static void ms_sstatus(uint64 mask);
  75:src/../h/riscv.h **** 
  76:src/../h/riscv.h ****     // mask clear register sstatus
  77:src/../h/riscv.h ****     static void mc_sstatus(uint64 mask);
  78:src/../h/riscv.h **** 
  79:src/../h/riscv.h ****     // read register sstatus
  80:src/../h/riscv.h ****     static uint64 r_sstatus();
  81:src/../h/riscv.h **** 
  82:src/../h/riscv.h ****     // write register sstatus
  83:src/../h/riscv.h ****     static void w_sstatus(uint64 sstatus);
  84:src/../h/riscv.h **** 
  85:src/../h/riscv.h ****     // supervisor trap
  86:src/../h/riscv.h ****     //static void supervisorTrap();
  87:src/../h/riscv.h **** 
  88:src/../h/riscv.h **** private:
  89:src/../h/riscv.h **** 
  90:src/../h/riscv.h ****     // supervisor trap handler
  91:src/../h/riscv.h ****     //static void handleSupervisorTrap();
  92:src/../h/riscv.h **** 
  93:src/../h/riscv.h **** };
  94:src/../h/riscv.h **** 
  95:src/../h/riscv.h **** inline uint64 Riscv::r_scause()
  96:src/../h/riscv.h **** {
  97:src/../h/riscv.h ****     uint64 scause;
  98:src/../h/riscv.h ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  99:src/../h/riscv.h ****     return scause;
 100:src/../h/riscv.h **** }
 101:src/../h/riscv.h **** 
 102:src/../h/riscv.h **** inline void Riscv::w_scause(uint64 scause)
 103:src/../h/riscv.h **** {
 104:src/../h/riscv.h ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 105:src/../h/riscv.h **** }
 106:src/../h/riscv.h **** 
 107:src/../h/riscv.h **** inline uint64 Riscv::r_sepc()
 108:src/../h/riscv.h **** {
 109:src/../h/riscv.h ****     uint64 volatile sepc;
 110:src/../h/riscv.h ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 111:src/../h/riscv.h ****     return sepc;
 112:src/../h/riscv.h **** }
 113:src/../h/riscv.h **** 
 114:src/../h/riscv.h **** inline void Riscv::w_sepc(uint64 sepc)
 115:src/../h/riscv.h **** {
 116:src/../h/riscv.h ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 117:src/../h/riscv.h **** }
 118:src/../h/riscv.h **** 
 119:src/../h/riscv.h **** inline uint64 Riscv::r_stvec()
GAS LISTING /tmp/ccWfDmNj.s 			page 5


 120:src/../h/riscv.h **** {
 121:src/../h/riscv.h ****     uint64 volatile stvec;
 122:src/../h/riscv.h ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 123:src/../h/riscv.h ****     return stvec;
 124:src/../h/riscv.h **** }
 125:src/../h/riscv.h **** 
 126:src/../h/riscv.h **** inline void Riscv::w_stvec(uint64 stvec)
 127:src/../h/riscv.h **** {
 128:src/../h/riscv.h ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
  83              		.loc 2 128 5 is_stmt 1
  84              		.loc 2 128 69 is_stmt 0
  85              	#APP
  86              	# 128 "src/../h/riscv.h" 1
 129              	}
  87              		csrw stvec, a5
  88              	# 0 "" 2
  89              	.LVL5:
  90              	#NO_APP
  91              	.LBE9:
  92              	.LBE8:
  25:src/main.cpp  ****     Riscv::ms_sstatus(Riscv::SSTATUS_SIE);
  93              		.loc 1 25 5 is_stmt 1
  94              	.LBB10:
  95              	.LBB11:
 130:src/../h/riscv.h **** 
 131:src/../h/riscv.h **** inline uint64 Riscv::r_stval()
 132:src/../h/riscv.h **** {
 133:src/../h/riscv.h ****     uint64 volatile stval;
 134:src/../h/riscv.h ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 135:src/../h/riscv.h ****     return stval;
 136:src/../h/riscv.h **** }
 137:src/../h/riscv.h **** 
 138:src/../h/riscv.h **** inline void Riscv::w_stval(uint64 stval)
 139:src/../h/riscv.h **** {
 140:src/../h/riscv.h ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 141:src/../h/riscv.h **** }
 142:src/../h/riscv.h **** 
 143:src/../h/riscv.h **** inline void Riscv::ms_sip(uint64 mask)
 144:src/../h/riscv.h **** {
 145:src/../h/riscv.h ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 146:src/../h/riscv.h **** }
 147:src/../h/riscv.h **** 
 148:src/../h/riscv.h **** inline void Riscv::mc_sip(uint64 mask)
 149:src/../h/riscv.h **** {
 150:src/../h/riscv.h ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 151:src/../h/riscv.h **** }
 152:src/../h/riscv.h **** 
 153:src/../h/riscv.h **** inline uint64 Riscv::r_sip()
 154:src/../h/riscv.h **** {
 155:src/../h/riscv.h ****     uint64 volatile sip;
 156:src/../h/riscv.h ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 157:src/../h/riscv.h ****     return sip;
 158:src/../h/riscv.h **** }
 159:src/../h/riscv.h **** 
 160:src/../h/riscv.h **** inline void Riscv::w_sip(uint64 sip)
 161:src/../h/riscv.h **** {
 162:src/../h/riscv.h ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
GAS LISTING /tmp/ccWfDmNj.s 			page 6


 163:src/../h/riscv.h **** }
 164:src/../h/riscv.h **** 
 165:src/../h/riscv.h **** inline void Riscv::ms_sstatus(uint64 mask)
 166:src/../h/riscv.h **** {
 167:src/../h/riscv.h ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
  96              		.loc 2 167 5
  97              		.loc 2 167 68 is_stmt 0
  98 0080 93072000 		li	a5,2
  99              	#APP
 100              	# 167 "src/../h/riscv.h" 1
 168              	}
 101              		csrs sstatus, a5
 102              	# 0 "" 2
 103              	.LVL6:
 104              	#NO_APP
 105              	.LBE11:
 106              	.LBE10:
  26:src/main.cpp  **** 
  27:src/main.cpp  **** 
  28:src/main.cpp  **** 
  29:src/main.cpp  ****     _thread::running = threads[0];
 107              		.loc 1 29 5 is_stmt 1
 108              		.loc 1 29 22 is_stmt 0
 109 0088 97070000 		la	a5,_ZN7_thread7runningE
 109      83B70700 
 110 0090 23B02701 		sd	s2,0(a5)
 111              	.L5:
  30:src/main.cpp  **** 
  31:src/main.cpp  ****     while (!(threads[1]->isFinished()))
 112              		.loc 1 31 5 is_stmt 1
 113              		.loc 1 31 12
 114              	.LVL7:
 115              	.LBB12:
 116              	.LBB13:
 117              		.file 3 "src/../h/_thread.h"
   1:src/../h/_thread.h **** //
   2:src/../h/_thread.h **** // Created by os on 6/21/22.
   3:src/../h/_thread.h **** //
   4:src/../h/_thread.h **** 
   5:src/../h/_thread.h **** #ifndef OS_PROJEKAT__THREAD_H
   6:src/../h/_thread.h **** #define OS_PROJEKAT__THREAD_H
   7:src/../h/_thread.h **** 
   8:src/../h/_thread.h **** //
   9:src/../h/_thread.h **** // Created by os on 6/17/22.
  10:src/../h/_thread.h **** //
  11:src/../h/_thread.h **** 
  12:src/../h/_thread.h **** #include "../lib/hw.h"
  13:src/../h/_thread.h **** #include "Scheduler.h"
  14:src/../h/_thread.h **** #include "riscv.h"
  15:src/../h/_thread.h **** #include "../h/syscall_cpp.h"
  16:src/../h/_thread.h **** 
  17:src/../h/_thread.h **** class _thread {
  18:src/../h/_thread.h **** public:
  19:src/../h/_thread.h ****     friend class _sem;
  20:src/../h/_thread.h ****     using Body = void (*)(void*);
  21:src/../h/_thread.h **** private:
  22:src/../h/_thread.h ****     _thread(Body body, uint64 timeSlice, void* arg) :
GAS LISTING /tmp/ccWfDmNj.s 			page 7


  23:src/../h/_thread.h ****             body(body),
  24:src/../h/_thread.h ****             stack(body != nullptr ? new uint64[STACK_SIZE] : nullptr),
  25:src/../h/_thread.h ****             timeSlice(timeSlice),
  26:src/../h/_thread.h ****             finished(false),
  27:src/../h/_thread.h ****             blocked(false),
  28:src/../h/_thread.h ****             arg(arg),
  29:src/../h/_thread.h ****             context({(uint64) &threadWrapper,
  30:src/../h/_thread.h ****                      stack != nullptr ? (uint64) &stack[STACK_SIZE] : 0
  31:src/../h/_thread.h ****                     })
  32:src/../h/_thread.h **** 
  33:src/../h/_thread.h ****     {
  34:src/../h/_thread.h ****         if (body != nullptr) { Scheduler::put(this); }
  35:src/../h/_thread.h ****     }
  36:src/../h/_thread.h **** 
  37:src/../h/_thread.h ****     struct Context
  38:src/../h/_thread.h ****     {
  39:src/../h/_thread.h ****         uint64 ra;
  40:src/../h/_thread.h ****         uint64 sp;
  41:src/../h/_thread.h ****     };
  42:src/../h/_thread.h **** 
  43:src/../h/_thread.h ****     Body body;
  44:src/../h/_thread.h ****     uint64 *stack;
  45:src/../h/_thread.h ****     uint64 timeSlice;
  46:src/../h/_thread.h ****     bool finished;
  47:src/../h/_thread.h ****     bool blocked;
  48:src/../h/_thread.h ****     void* arg;
  49:src/../h/_thread.h ****     Context context;
  50:src/../h/_thread.h **** 
  51:src/../h/_thread.h ****     friend class Riscv;
  52:src/../h/_thread.h **** 
  53:src/../h/_thread.h ****     static void threadWrapper();
  54:src/../h/_thread.h **** 
  55:src/../h/_thread.h **** 
  56:src/../h/_thread.h ****     static uint64 timeSliceCounter;
  57:src/../h/_thread.h **** 
  58:src/../h/_thread.h ****     static uint64 constexpr STACK_SIZE = DEFAULT_STACK_SIZE;
  59:src/../h/_thread.h ****     static uint64 constexpr TIME_SLICE = DEFAULT_TIME_SLICE;
  60:src/../h/_thread.h **** 
  61:src/../h/_thread.h **** 
  62:src/../h/_thread.h **** public:
  63:src/../h/_thread.h ****     ~_thread() { MemoryAllocator::mem_free((char*)stack-STACK_SIZE); }
  64:src/../h/_thread.h **** 
  65:src/../h/_thread.h ****     bool isFinished() const { return finished; }
 118              		.loc 3 65 31
 119              		.loc 3 65 38 is_stmt 0
 120 0094 83C78401 		lbu	a5,24(s1)
 121              	.LVL8:
 122              	.LBE13:
 123              	.LBE12:
 124              		.loc 1 31 12
 125 0098 63980700 		bnez	a5,.L4
  32:src/main.cpp  ****     {
  33:src/main.cpp  ****         _thread::yield();
 126              		.loc 1 33 9 is_stmt 1
 127              		.loc 1 33 23 is_stmt 0
 128 009c 97000000 		call	_ZN7_thread5yieldEv@plt
 128      E7800000 
GAS LISTING /tmp/ccWfDmNj.s 			page 8


 129              	.LVL9:
 130 00a4 6FF01FFF 		j	.L5
 131              	.L4:
  34:src/main.cpp  ****     }
  35:src/main.cpp  ****     return 0;
 132              		.loc 1 35 5 is_stmt 1
  36:src/main.cpp  **** }
 133              		.loc 1 36 1 is_stmt 0
 134 00a8 13050000 		li	a0,0
 135 00ac 83308101 		ld	ra,24(sp)
 136              		.cfi_restore 1
 137 00b0 03340101 		ld	s0,16(sp)
 138              		.cfi_restore 8
 139              		.cfi_def_cfa 2, 32
 140 00b4 83348100 		ld	s1,8(sp)
 141              		.cfi_restore 9
 142 00b8 03390100 		ld	s2,0(sp)
 143              		.cfi_restore 18
 144 00bc 13010102 		addi	sp,sp,32
 145              		.cfi_def_cfa_offset 0
 146 00c0 67800000 		jr	ra
 147              		.cfi_endproc
 148              	.LFE41:
 150              	.Letext0:
 151              		.file 4 "src/../lib/hw.h"
 152              		.file 5 "src/../h/syscall_c.h"
GAS LISTING /tmp/ccWfDmNj.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccWfDmNj.s:9      .text:0000000000000000 _Z15wrapperUserMainPv
     /tmp/ccWfDmNj.s:13     .text:0000000000000000 .L0 
     /tmp/ccWfDmNj.s:14     .text:0000000000000000 .L0 
     /tmp/ccWfDmNj.s:15     .text:0000000000000004 .L0 
     /tmp/ccWfDmNj.s:18     .text:000000000000000c .L0 
     /tmp/ccWfDmNj.s:19     .text:000000000000000c .L0 
     /tmp/ccWfDmNj.s:21     .text:0000000000000010 .L0 
     /tmp/ccWfDmNj.s:23     .text:0000000000000010 .L0 
     /tmp/ccWfDmNj.s:24     .text:0000000000000010 .L0 
     /tmp/ccWfDmNj.s:27     .text:0000000000000018 .L0 
     /tmp/ccWfDmNj.s:28     .text:000000000000001c .L0 
     /tmp/ccWfDmNj.s:30     .text:0000000000000020 .L0 
     /tmp/ccWfDmNj.s:31     .text:0000000000000020 .L0 
     /tmp/ccWfDmNj.s:33     .text:0000000000000024 .L0 
     /tmp/ccWfDmNj.s:35     .text:0000000000000028 .L0 
     /tmp/ccWfDmNj.s:41     .text:0000000000000028 main
     /tmp/ccWfDmNj.s:44     .text:0000000000000028 .L0 
     /tmp/ccWfDmNj.s:45     .text:0000000000000028 .L0 
     /tmp/ccWfDmNj.s:46     .text:000000000000002c .L0 
     /tmp/ccWfDmNj.s:51     .text:000000000000003c .L0 
     /tmp/ccWfDmNj.s:52     .text:000000000000003c .L0 
     /tmp/ccWfDmNj.s:53     .text:000000000000003c .L0 
     /tmp/ccWfDmNj.s:54     .text:000000000000003c .L0 
     /tmp/ccWfDmNj.s:56     .text:0000000000000040 .L0 
     /tmp/ccWfDmNj.s:58     .text:0000000000000040 .L0 
     /tmp/ccWfDmNj.s:59     .text:0000000000000040 .L0 
     /tmp/ccWfDmNj.s:60     .text:0000000000000040 .L0 
     /tmp/ccWfDmNj.s:66     .text:0000000000000054 .L0 
     /tmp/ccWfDmNj.s:67     .text:0000000000000054 .L0 
     /tmp/ccWfDmNj.s:73     .text:000000000000006c .L0 
     /tmp/ccWfDmNj.s:74     .text:000000000000006c .L0 
     /tmp/ccWfDmNj.s:77     .text:0000000000000074 .L0 
     /tmp/ccWfDmNj.s:78     .text:0000000000000074 .L0 
     /tmp/ccWfDmNj.s:84     .text:000000000000007c .L0 
    src/../h/riscv.h:128    .text:000000000000007c .L0 
     /tmp/ccWfDmNj.s:96     .text:0000000000000080 .L0 
     /tmp/ccWfDmNj.s:97     .text:0000000000000080 .L0 
     /tmp/ccWfDmNj.s:98     .text:0000000000000080 .L0 
     /tmp/ccWfDmNj.s:108    .text:0000000000000088 .L0 
     /tmp/ccWfDmNj.s:109    .text:0000000000000088 .L0 
     /tmp/ccWfDmNj.s:113    .text:0000000000000094 .L0 
     /tmp/ccWfDmNj.s:118    .text:0000000000000094 .L0 
     /tmp/ccWfDmNj.s:119    .text:0000000000000094 .L0 
     /tmp/ccWfDmNj.s:120    .text:0000000000000094 .L0 
     /tmp/ccWfDmNj.s:125    .text:0000000000000098 .L0 
     /tmp/ccWfDmNj.s:127    .text:000000000000009c .L0 
     /tmp/ccWfDmNj.s:128    .text:000000000000009c .L0 
     /tmp/ccWfDmNj.s:133    .text:00000000000000a8 .L0 
     /tmp/ccWfDmNj.s:134    .text:00000000000000a8 .L0 
     /tmp/ccWfDmNj.s:136    .text:00000000000000b0 .L0 
     /tmp/ccWfDmNj.s:138    .text:00000000000000b4 .L0 
     /tmp/ccWfDmNj.s:139    .text:00000000000000b4 .L0 
     /tmp/ccWfDmNj.s:141    .text:00000000000000b8 .L0 
     /tmp/ccWfDmNj.s:143    .text:00000000000000bc .L0 
     /tmp/ccWfDmNj.s:145    .text:00000000000000c0 .L0 
GAS LISTING /tmp/ccWfDmNj.s 			page 10


     /tmp/ccWfDmNj.s:147    .text:00000000000000c4 .L0 
     /tmp/ccWfDmNj.s:153    .text:00000000000000c4 .L0 
     /tmp/ccWfDmNj.s:68     .text:0000000000000058 .L0 
     /tmp/ccWfDmNj.s:78     .text:0000000000000074 .L0 
     /tmp/ccWfDmNj.s:109    .text:0000000000000088 .L0 
     /tmp/ccWfDmNj.s:131    .text:00000000000000a8 .L4
     /tmp/ccWfDmNj.s:111    .text:0000000000000094 .L5
     /tmp/ccWfDmNj.s:1025   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccWfDmNj.s:2094   .debug_str:00000000000005bd .LASF110
     /tmp/ccWfDmNj.s:1994   .debug_str:00000000000002dc .LASF111
     /tmp/ccWfDmNj.s:2130   .debug_str:00000000000007c0 .LASF112
     /tmp/ccWfDmNj.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccWfDmNj.s:150    .text:00000000000000c4 .Letext0
     /tmp/ccWfDmNj.s:1886   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccWfDmNj.s:2022   .debug_str:00000000000003c0 .LASF0
     /tmp/ccWfDmNj.s:2036   .debug_str:00000000000003f9 .LASF1
     /tmp/ccWfDmNj.s:2006   .debug_str:0000000000000342 .LASF2
     /tmp/ccWfDmNj.s:1976   .debug_str:000000000000027e .LASF4
     /tmp/ccWfDmNj.s:2070   .debug_str:00000000000004f0 .LASF3
     /tmp/ccWfDmNj.s:1912   .debug_str:000000000000009f .LASF5
     /tmp/ccWfDmNj.s:2038   .debug_str:000000000000040c .LASF6
     /tmp/ccWfDmNj.s:2020   .debug_str:00000000000003ad .LASF7
     /tmp/ccWfDmNj.s:2104   .debug_str:00000000000006de .LASF8
     /tmp/ccWfDmNj.s:1960   .debug_str:00000000000001fb .LASF9
     /tmp/ccWfDmNj.s:2050   .debug_str:0000000000000455 .LASF10
     /tmp/ccWfDmNj.s:2098   .debug_str:000000000000069a .LASF11
     /tmp/ccWfDmNj.s:1916   .debug_str:00000000000000b2 .LASF12
     /tmp/ccWfDmNj.s:1894   .debug_str:000000000000003d .LASF13
     /tmp/ccWfDmNj.s:1922   .debug_str:00000000000000e5 .LASF14
     /tmp/ccWfDmNj.s:2060   .debug_str:00000000000004a4 .LASF15
     /tmp/ccWfDmNj.s:1928   .debug_str:0000000000000102 .LASF16
     /tmp/ccWfDmNj.s:1974   .debug_str:0000000000000276 .LASF45
     /tmp/ccWfDmNj.s:1900   .debug_str:0000000000000060 .LASF113
     /tmp/ccWfDmNj.s:2096   .debug_str:0000000000000681 .LASF47
     /tmp/ccWfDmNj.s:2056   .debug_str:0000000000000494 .LASF114
     /tmp/ccWfDmNj.s:1984   .debug_str:00000000000002aa .LASF17
     /tmp/ccWfDmNj.s:2028   .debug_str:00000000000003dd .LASF18
     /tmp/ccWfDmNj.s:2030   .debug_str:00000000000003e3 .LASF19
     /tmp/ccWfDmNj.s:1982   .debug_str:00000000000002a1 .LASF20
     /tmp/ccWfDmNj.s:1888   .debug_str:0000000000000000 .LASF21
     /tmp/ccWfDmNj.s:1988   .debug_str:00000000000002ba .LASF22
     /tmp/ccWfDmNj.s:2002   .debug_str:0000000000000319 .LASF115
     /tmp/ccWfDmNj.s:1964   .debug_str:000000000000021f .LASF116
     /tmp/ccWfDmNj.s:2072   .debug_str:0000000000000502 .LASF117
     /tmp/ccWfDmNj.s:1996   .debug_str:00000000000002e9 .LASF23
     /tmp/ccWfDmNj.s:1970   .debug_str:0000000000000255 .LASF24
     /tmp/ccWfDmNj.s:2102   .debug_str:00000000000006d5 .LASF25
     /tmp/ccWfDmNj.s:2042   .debug_str:000000000000042a .LASF27
     /tmp/ccWfDmNj.s:2040   .debug_str:000000000000041f .LASF29
     /tmp/ccWfDmNj.s:2004   .debug_str:0000000000000327 .LASF31
     /tmp/ccWfDmNj.s:2008   .debug_str:0000000000000350 .LASF26
     /tmp/ccWfDmNj.s:1890   .debug_str:0000000000000008 .LASF28
     /tmp/ccWfDmNj.s:1898   .debug_str:0000000000000056 .LASF30
     /tmp/ccWfDmNj.s:1918   .debug_str:00000000000000c2 .LASF32
     /tmp/ccWfDmNj.s:1980   .debug_str:0000000000000296 .LASF33
     /tmp/ccWfDmNj.s:2134   .debug_str:00000000000007e5 .LASF34
     /tmp/ccWfDmNj.s:2000   .debug_str:000000000000030c .LASF35
GAS LISTING /tmp/ccWfDmNj.s 			page 11


     /tmp/ccWfDmNj.s:2052   .debug_str:0000000000000464 .LASF36
     /tmp/ccWfDmNj.s:1956   .debug_str:00000000000001d5 .LASF39
     /tmp/ccWfDmNj.s:2012   .debug_str:0000000000000366 .LASF41
     /tmp/ccWfDmNj.s:2122   .debug_str:0000000000000782 .LASF67
     /tmp/ccWfDmNj.s:2110   .debug_str:0000000000000708 .LASF69
     /tmp/ccWfDmNj.s:1992   .debug_str:00000000000002cf .LASF37
     /tmp/ccWfDmNj.s:2118   .debug_str:0000000000000751 .LASF38
     /tmp/ccWfDmNj.s:2062   .debug_str:00000000000004ba .LASF40
     /tmp/ccWfDmNj.s:2088   .debug_str:0000000000000590 .LASF42
     /tmp/ccWfDmNj.s:2026   .debug_str:00000000000003d4 .LASF43
     /tmp/ccWfDmNj.s:2086   .debug_str:0000000000000579 .LASF44
     /tmp/ccWfDmNj.s:2112   .debug_str:0000000000000722 .LASF46
     /tmp/ccWfDmNj.s:2100   .debug_str:00000000000006a9 .LASF48
     /tmp/ccWfDmNj.s:2034   .debug_str:00000000000003f3 .LASF49
     /tmp/ccWfDmNj.s:2078   .debug_str:000000000000052a .LASF50
     /tmp/ccWfDmNj.s:1940   .debug_str:0000000000000174 .LASF118
     /tmp/ccWfDmNj.s:2116   .debug_str:0000000000000744 .LASF51
     /tmp/ccWfDmNj.s:2064   .debug_str:00000000000004c0 .LASF52
     /tmp/ccWfDmNj.s:1958   .debug_str:00000000000001eb .LASF53
     /tmp/ccWfDmNj.s:1946   .debug_str:0000000000000198 .LASF54
     /tmp/ccWfDmNj.s:2076   .debug_str:000000000000051a .LASF55
     /tmp/ccWfDmNj.s:1978   .debug_str:0000000000000285 .LASF56
     /tmp/ccWfDmNj.s:2082   .debug_str:0000000000000553 .LASF99
     /tmp/ccWfDmNj.s:2016   .debug_str:0000000000000391 .LASF101
     /tmp/ccWfDmNj.s:2032   .debug_str:00000000000003ed .LASF57
     /tmp/ccWfDmNj.s:1932   .debug_str:000000000000012c .LASF119
     /tmp/ccWfDmNj.s:1926   .debug_str:00000000000000f6 .LASF58
     /tmp/ccWfDmNj.s:2120   .debug_str:0000000000000775 .LASF59
     /tmp/ccWfDmNj.s:1914   .debug_str:00000000000000a6 .LASF60
     /tmp/ccWfDmNj.s:2058   .debug_str:0000000000000499 .LASF61
     /tmp/ccWfDmNj.s:2126   .debug_str:0000000000000792 .LASF62
     /tmp/ccWfDmNj.s:1910   .debug_str:0000000000000091 .LASF63
     /tmp/ccWfDmNj.s:1938   .debug_str:0000000000000159 .LASF64
     /tmp/ccWfDmNj.s:1950   .debug_str:00000000000001ad .LASF65
     /tmp/ccWfDmNj.s:1892   .debug_str:0000000000000023 .LASF66
     /tmp/ccWfDmNj.s:1896   .debug_str:000000000000004d .LASF68
     /tmp/ccWfDmNj.s:2080   .debug_str:000000000000053e .LASF70
     /tmp/ccWfDmNj.s:1936   .debug_str:0000000000000150 .LASF71
     /tmp/ccWfDmNj.s:1934   .debug_str:000000000000013b .LASF72
     /tmp/ccWfDmNj.s:2074   .debug_str:0000000000000513 .LASF73
     /tmp/ccWfDmNj.s:2054   .debug_str:0000000000000481 .LASF74
     /tmp/ccWfDmNj.s:2092   .debug_str:00000000000005b6 .LASF75
     /tmp/ccWfDmNj.s:2084   .debug_str:0000000000000566 .LASF76
     /tmp/ccWfDmNj.s:1954   .debug_str:00000000000001cd .LASF77
     /tmp/ccWfDmNj.s:1930   .debug_str:0000000000000118 .LASF78
     /tmp/ccWfDmNj.s:2066   .debug_str:00000000000004d0 .LASF79
     /tmp/ccWfDmNj.s:1966   .debug_str:000000000000023c .LASF80
     /tmp/ccWfDmNj.s:1942   .debug_str:000000000000017c .LASF81
     /tmp/ccWfDmNj.s:2114   .debug_str:0000000000000730 .LASF82
     /tmp/ccWfDmNj.s:2132   .debug_str:00000000000007dd .LASF83
     /tmp/ccWfDmNj.s:1944   .debug_str:0000000000000184 .LASF84
     /tmp/ccWfDmNj.s:2024   .debug_str:00000000000003cd .LASF85
     /tmp/ccWfDmNj.s:1908   .debug_str:000000000000007e .LASF86
     /tmp/ccWfDmNj.s:1906   .debug_str:0000000000000077 .LASF87
     /tmp/ccWfDmNj.s:1952   .debug_str:00000000000001ba .LASF88
     /tmp/ccWfDmNj.s:2014   .debug_str:000000000000038b .LASF89
     /tmp/ccWfDmNj.s:2090   .debug_str:00000000000005a4 .LASF90
GAS LISTING /tmp/ccWfDmNj.s 			page 12


     /tmp/ccWfDmNj.s:1904   .debug_str:0000000000000071 .LASF91
     /tmp/ccWfDmNj.s:2106   .debug_str:00000000000006ee .LASF92
     /tmp/ccWfDmNj.s:2018   .debug_str:00000000000003a2 .LASF93
     /tmp/ccWfDmNj.s:2068   .debug_str:00000000000004d8 .LASF94
     /tmp/ccWfDmNj.s:1986   .debug_str:00000000000002af .LASF95
     /tmp/ccWfDmNj.s:1998   .debug_str:00000000000002f4 .LASF96
     /tmp/ccWfDmNj.s:1920   .debug_str:00000000000000db .LASF97
     /tmp/ccWfDmNj.s:1972   .debug_str:0000000000000260 .LASF98
     /tmp/ccWfDmNj.s:2010   .debug_str:000000000000035c .LASF100
     /tmp/ccWfDmNj.s:1962   .debug_str:0000000000000209 .LASF102
     /tmp/ccWfDmNj.s:1968   .debug_str:0000000000000250 .LASF103
     /tmp/ccWfDmNj.s:1948   .debug_str:00000000000001a8 .LASF104
     /tmp/ccWfDmNj.s:2046   .debug_str:0000000000000440 .LASF105
     /tmp/ccWfDmNj.s:42     .text:0000000000000028 .LFB41
     /tmp/ccWfDmNj.s:148    .text:00000000000000c4 .LFE41
     /tmp/ccWfDmNj.s:2108   .debug_str:0000000000000700 .LASF120
     /tmp/ccWfDmNj.s:80     .text:000000000000007c .LBB8
     /tmp/ccWfDmNj.s:92     .text:0000000000000080 .LBE8
     /tmp/ccWfDmNj.s:94     .text:0000000000000080 .LBB10
     /tmp/ccWfDmNj.s:106    .text:0000000000000088 .LBE10
     /tmp/ccWfDmNj.s:1858   .debug_loc:0000000000000000 .LLST0
     /tmp/ccWfDmNj.s:115    .text:0000000000000094 .LBB12
     /tmp/ccWfDmNj.s:123    .text:0000000000000098 .LBE12
     /tmp/ccWfDmNj.s:1866   .debug_loc:0000000000000024 .LLST1
     /tmp/ccWfDmNj.s:63     .text:0000000000000050 .LVL1
     /tmp/ccWfDmNj.s:70     .text:0000000000000068 .LVL2
     /tmp/ccWfDmNj.s:75     .text:0000000000000074 .LVL3
     /tmp/ccWfDmNj.s:129    .text:00000000000000a4 .LVL9
     /tmp/ccWfDmNj.s:2048   .debug_str:0000000000000445 .LASF106
     /tmp/ccWfDmNj.s:2128   .debug_str:00000000000007aa .LASF107
     /tmp/ccWfDmNj.s:10     .text:0000000000000000 .LFB40
     /tmp/ccWfDmNj.s:36     .text:0000000000000028 .LFE40
     /tmp/ccWfDmNj.s:25     .text:0000000000000018 .LVL0
     /tmp/ccWfDmNj.s:2124   .debug_str:000000000000078d .LASF121
     /tmp/ccWfDmNj.s:1924   .debug_str:00000000000000f1 .LASF108
     /tmp/ccWfDmNj.s:2044   .debug_str:000000000000043a .LASF109
     /tmp/ccWfDmNj.s:1990   .debug_str:00000000000002c2 .LASF122
     /tmp/ccWfDmNj.s:1902   .debug_str:0000000000000068 .LASF123
     /tmp/ccWfDmNj.s:89     .text:0000000000000080 .LVL5
     /tmp/ccWfDmNj.s:103    .text:0000000000000088 .LVL6
     /tmp/ccWfDmNj.s:114    .text:0000000000000094 .LVL7
     /tmp/ccWfDmNj.s:121    .text:0000000000000098 .LVL8
     /tmp/ccWfDmNj.s:154    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_Z8userMainv
_ZN7_thread12createThreadEPFvPvES0_
_ZN7_thread5startEv
trap
_ZN7_thread7runningE
_ZN7_thread5yieldEv
